* CRUD I: QUERYING ON ARRAY FIELDS
----------------------------------

* Matching Multiple Array Elements with $all
--------------------------------------------
db.<collection>.find({ <field>: { $all: [ <value1>, <value2>, … ] } })

	Example
	-------

	db.books.find({ genres: { $all: [ "science fiction", "adventure" ] } })

	Result
	------

{
  _id: ObjectId(...),
  title: "Jurassic Park",
  author: "Michael Crichton",
  year_published: 1990,
  genres: ["science fiction", "adventure", "fantasy", "thriller"]
},
{
  _id: ObjectId(...),
  title: "A Wrinkle in Time",
  author: "Madeleine L'Engle",
  year_published: 1962,
  genres: ["young adult", "fantasy", "science fiction", "adventure"]
},
{
  _id: ObjectId(...),
  title: "Dune",
  author: "Frank Herbert",
  year_published: 1965,
  genres: ["science fiction", "fantasy", "adventure"]
},
…

* Querying on compound filter conditions
----------------------------------------

db.<collection>.find({ <field>: { <operator>: <value>, <operator2>: <value2>, … } })

	Example
	-------
		. db.tennis_players.find({ wimbledon_singles_wins: { $gt: 1971, $lt: 1935 } })
	
	Result
	------

{
  _id: ObjectId(...),
  name: "Suzanna Lenglen",
  country: "United States",
  wimbledon_singles_wins: [1919, 1920, 1921, 1922, 1923, 1925]
},
{
  _id: ObjectId(...),
  name: "Roger Federer",
  country: "Switzerland",
  wimbledon_singles_wins: [2003, 2004, 2005, 2006, 2007, 2009, 2012, 2017]
},
…


* Querying for all conditions with $elemMatch
---------------------------------------------

db.<collection>.find({ <field>: { $elemMatch: { <operator>: <value>, <operator2>: <value2>, ... } } })

	Example
	-------
		. db.tennis_players.find({ 
 			wimbledon_singles_wins: { $elemMatch: { $gte: 2000, $lt: 2020 } } 
		})

	Result
	------

{
  _id: ObjectId(...),
  name: "Pete Sampras",
  country: "United States",
  wimbledon_singles_wins: [1993, 1994, 1995, 1997, 1998, 1999, 2000]
},
{
  _id: ObjectId(...),
  name: "Serena Williams",
  country: "United States",
  wimbledon_singles_wins: [2002, 2003, 2009, 2010, 2012, 2015, 2016]
},
{
  _id: ObjectId(...),
  name: "Roger Federer",
  country: "Switzerland",
  wimbledon_singles_wins: [2003, 2004, 2005, 2006, 2007, 2009, 2012, 2017]
}


* Querying an Array of Embedded Documents
-----------------------------------------
	- Example:
	----------

{
  _id: ObjectId(...),
  name: "Miyu Kato",
  country: "Japan",
  wimbledon_doubles_placements: 
  [{ 
    year: 2016,
    place: 2
  }, 
  { 
    year: 2017,
    place: 1
  },
  { 
    year: 2018,
    place: 1
  },
  { 
    year: 2019,
    place: 1
  }]
}

db.tennis_players.find( { "wimbledon_doubles_placements": { year: 2019, place: 2 } } )

	- Result:
	---------

{
  _id: ObjectId(...),
  name: "Gabriela Dabrowski",
  country: "Canada",
  wimbledon_doubles_placements: 
  [{ 
    year: 2019,
    place: 2
  }]
},
{
  _id: ObjectId(...),
  name: "Yifan Xu",
  country: “China”,
  wimbledon_doubles_placements: 
  [{ 
    year: 2019,
    place: 2
  }]
}…

	- However, a query like this:

		.	db.tennis_players.find( { "wimbledon_doubles_placements": {place: 2,  year: 2019 } } )

	Would not return any results since there would be no documents with that specific ordering.

	We can also query based on a single field. For example, if we just wanted to query for any Wimbledon doubles winners in the year 2016, we can do the following:   

	db.tennis_players.find( { "wimbledon_doubles_placements.year": 2016 )

	- This query would return results like the following:

{
  _id: ObjectId(...),
  name: "Tímea Babos",
  country: "Hungary",
  wimbledon_doubles_placements: 
  [{ 
    year: 2015,
    place: 4
   },
   {
    year: 2016,
    place: 2
  }]
{
  _id: ObjectId(...),
  name: "Yaroslava Shvedova",
  country: "Kazakhstan",
  wimbledon_doubles_placements: 
  [{ 
    year: 2010,
    place: 1
   },
   {
    year: 2016,
    place: 2
  }]
}…

	- General syntax:

db.<collection>.find({ <parent field>: { <embedded document field>: <value>, <embedded document field2>: <value2>, ... } } )









































	



